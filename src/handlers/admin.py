from src.config.config import settings
from aiogram import Router, types, F
from aiogram.filters import Command
from src.utils.logging import write_logs
from src.keyboards.inlinebutton import (
    new_message,
    get_admin_keyboard,
)
from src.utils.localization import get_message
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
import os
from aiogram.types import (
    FSInputFile,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    MessageEntity,
)
from src.utils.statistics import (
    get_time_based_statistics,
    generate_time_statistics_excel,
)
from src.utils.user_statistics import (
    get_user_statistics,
    generate_user_statistics_excel,
)
from src.database.using_data import get_all_users

router = Router(name=__name__)


class AdminStates(StatesGroup):
    WAITING_PASSWORD = State()
    WAITING_MAILING_TEXT = State()
    WAITING_MAILING_MEDIA = State()
    WAITING_MAILING_BUTTONS = State()
    WAITING_BUTTON_TEXT = State()
    WAITING_BUTTON_URL = State()


@router.message(Command("admin"))
async def handle_admin_command(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.
    
    Args:
        message (types.Message): –°–æ–æ–±—â–µ–Ω–∏–µ, —Å–æ–¥–µ—Ä–∂–∞—â–µ–µ –∫–æ–º–∞–Ω–¥—É –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        state (FSMContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º.
    """
    user_id = message.from_user.id
    await write_logs("info", f"Admin command received from user {user_id}")

    if user_id not in settings.config.admins.admins:
        await write_logs("warning", f"Unauthorized access attempt by {user_id}")
        # await new_message(message, MESSAGES["ru"]["access_denied"], None)
        return

    await state.set_state(AdminStates.WAITING_PASSWORD)
    await new_message(message,  await get_message("enter_password"), None)


@router.message(AdminStates.WAITING_PASSWORD)
async def handle_password_input(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –ø–∞—Ä–æ–ª—è –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.
    
    Args:
        message (types.Message): –°–æ–æ–±—â–µ–Ω–∏–µ, —Å–æ–¥–µ—Ä–∂–∞—â–µ–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å.
        state (FSMContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º.
    """
    user_id = message.from_user.id
    input_password = message.text

    if input_password == settings.config.ADMIN_PASSWORD:
        await write_logs("info", f"Admin access granted for {user_id}")
        await new_message(
            message, await get_message("admin_msg"), await get_admin_keyboard()
        )
        await state.clear()
    else:
        await write_logs("warning", f"Wrong password attempt by {user_id}")
        await new_message(message, await get_message("wrong_password"), None)


@router.callback_query(lambda c: c.data == "admin_activity_stats")
async def process_activity_stats_button(callback_query: types.CallbackQuery):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.
    
    Args:
        callback_query (types.CallbackQuery): –ó–∞–ø—Ä–æ—Å –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    user_id = callback_query.from_user.id

    try:
        if user_id not in settings.config.admins.admins:
            await write_logs(
                "warning", f"Unauthorized stats access attempt by {user_id}"
            )
            await callback_query.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
            return

        await write_logs("info", f"Activity stats request from admin {user_id}")
        await callback_query.answer("‚è≥ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏...")

        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = await get_time_based_statistics()

        if stats:
            stats_text = (
                "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞:\n\n"
                f"–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞:\n"
                f"üë§ –ù–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['daily']['users']}\n"
                f"üìù –ü—Ä–æ–π–¥–µ–Ω–æ –æ–ø—Ä–æ—Å–æ–≤: {stats['daily']['surveys']}\n\n"
                f"–ó–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é:\n"
                f"üë§ –ù–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['weekly']['users']}\n"
                f"üìù –ü—Ä–æ–π–¥–µ–Ω–æ –æ–ø—Ä–æ—Å–æ–≤: {stats['weekly']['surveys']}\n\n"
                f"–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü:\n"
                f"üë§ –ù–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['monthly']['users']}\n"
                f"üìù –ü—Ä–æ–π–¥–µ–Ω–æ –æ–ø—Ä–æ—Å–æ–≤: {stats['monthly']['surveys']}\n\n"
                f"–í—Å–µ–≥–æ:\n"
                f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['total']['users']}\n"
                f"üìù –ü—Ä–æ–π–¥–µ–Ω–æ –æ–ø—Ä–æ—Å–æ–≤: {stats['total']['surveys']}"
            )

            try:
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º Excel –æ—Ç—á–µ—Ç
                excel_path = await generate_time_statistics_excel()
                if excel_path:
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                    await callback_query.message.edit_text(
                        stats_text, reply_markup=await get_admin_keyboard()
                    )

                    try:
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º Excel —Ñ–∞–π–ª
                        doc = FSInputFile(excel_path)
                        await callback_query.message.answer_document(
                            doc, caption="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞"
                        )
                        await write_logs(
                            "info",
                            f"Activity statistics Excel report sent to admin {user_id}",
                        )
                    except Exception as e:
                        await write_logs("error", f"Error sending Excel file: {str(e)}")
                        await callback_query.message.answer(
                            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ Excel —Ñ–∞–π–ª–∞"
                        )
                    finally:
                        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                        try:
                            if os.path.exists(excel_path):
                                os.remove(excel_path)
                                await write_logs(
                                    "info",
                                    f"Temporary Excel file removed: {excel_path}",
                                )
                        except Exception as e:
                            await write_logs(
                                "error",
                                f"Error removing temporary Excel file: {str(e)}",
                            )
                else:
                    await callback_query.message.edit_text(
                        stats_text + "\n\n‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ Excel –æ—Ç—á–µ—Ç–∞",
                        reply_markup=await get_admin_keyboard(),
                    )
            except Exception as e:
                await write_logs("error", f"Error in Excel report generation: {str(e)}")
                await callback_query.message.edit_text(
                    stats_text + "\n\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ Excel –æ—Ç—á–µ—Ç–∞",
                    reply_markup=await get_admin_keyboard(),
                )
        else:
            await write_logs("warning", "No activity statistics data available")
            await callback_query.message.edit_text(
                "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏\n\n"
                "–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.\n"
                "–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
                "- –ë–æ—Ç —Ç–æ–ª—å–∫–æ –∑–∞–ø—É—â–µ–Ω\n"
                "- –ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
                "- –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö",
                reply_markup=await get_admin_keyboard(),
            )

    except Exception as e:
        await write_logs(
            "error", f"Critical error in activity stats processing: {str(e)}"
        )
        await callback_query.message.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏",
            reply_markup=await get_admin_keyboard(),
        )


@router.callback_query(lambda c: c.data == "admin_user_stats")
async def process_user_stats_button(callback_query: types.CallbackQuery):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
    
    Args:
        callback_query (types.CallbackQuery): –ó–∞–ø—Ä–æ—Å –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    user_id = callback_query.from_user.id

    try:
        if user_id not in settings.config.admins.admins:
            await write_logs(
                "warning", f"Unauthorized user stats access attempt by {user_id}"
            )
            await callback_query.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
            return

        await write_logs("info", f"User stats request from admin {user_id}")
        await callback_query.answer("‚è≥ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º Excel –æ—Ç—á–µ—Ç
        excel_path = await generate_user_statistics_excel()
        if excel_path:
            try:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º Excel —Ñ–∞–π–ª
                doc = FSInputFile(excel_path)
                await callback_query.message.answer_document(
                    doc, caption="üë• –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–æ—Ç–∞"
                )
                await write_logs(
                    "info",
                    f"User statistics Excel report sent to admin {user_id}",
                )

                # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                try:
                    if os.path.exists(excel_path):
                        os.remove(excel_path)
                        await write_logs(
                            "info",
                            f"Temporary Excel file removed: {excel_path}",
                        )
                except Exception as e:
                    await write_logs(
                        "error",
                        f"Error removing temporary Excel file: {str(e)}",
                    )
            except Exception as e:
                await write_logs("error", f"Error sending Excel file: {str(e)}")
                await callback_query.message.answer(
                    "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ Excel —Ñ–∞–π–ª–∞"
                )
        else:
            await write_logs("warning", "No user statistics data available")
            await callback_query.message.edit_text(
                "üë• –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n\n"
                "–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.\n"
                "–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
                "- –ë–æ—Ç —Ç–æ–ª—å–∫–æ –∑–∞–ø—É—â–µ–Ω\n"
                "- –ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
                "- –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö",
                reply_markup=await get_admin_keyboard(),
            )

    except Exception as e:
        await write_logs("error", f"Critical error in user stats processing: {str(e)}")
        await callback_query.message.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏",
            reply_markup=await get_admin_keyboard(),
        )


@router.callback_query(lambda c: c.data == "admin_mailing")
async def process_mailing_button(
    callback_query: types.CallbackQuery, state: FSMContext
):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ —Ä–∞—Å—Å—ã–ª–∫–∏.
    
    Args:
        callback_query (types.CallbackQuery): –ó–∞–ø—Ä–æ—Å –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        state (FSMContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º.
    """
    user_id = callback_query.from_user.id

    if user_id not in settings.config.admins.admins:
        await write_logs("warning", f"Unauthorized mailing attempt by {user_id}")
        await callback_query.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return

    await write_logs("info", f"Mailing request from admin {user_id}")

    # Check if already in mailing state to prevent multiple triggers
    current_state = await state.get_state()
    if current_state == AdminStates.WAITING_MAILING_MEDIA.state:
        await callback_query.answer("‚ùå –í—ã —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–∞—Å—Å—ã–ª–∫–∏.")
        return

    await state.set_state(AdminStates.WAITING_MAILING_MEDIA)
    await callback_query.message.edit_text(
        "üì® –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.\n"
        "–≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å:\n"
        "- –¢–µ–∫—Å—Ç\n"
        "- –§–æ—Ç–æ\n"
        "- –í–∏–¥–µ–æ\n"
        "- –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ",
        reply_markup=await get_admin_keyboard(),
    )
    await callback_query.answer()


@router.message(AdminStates.WAITING_MAILING_MEDIA)
async def handle_mailing_content(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.
    
    Args:
        message (types.Message): –°–æ–æ–±—â–µ–Ω–∏–µ, —Å–æ–¥–µ—Ä–∂–∞—â–µ–µ –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.
        state (FSMContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º.
    """
    try:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–æ–±—â–µ–Ω–∏–∏
        mailing_data = {}

        if message.text:
            mailing_data["type"] = "text"
            mailing_data["content"] = message.text
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º entities –∫–∞–∫ —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π
            if message.entities:
                mailing_data["entities"] = [
                    {
                        "type": entity.type,
                        "offset": entity.offset,
                        "length": entity.length,
                        "url": entity.url,
                        "user": entity.user,
                        "language": entity.language,
                        "custom_emoji_id": entity.custom_emoji_id,
                    }
                    for entity in message.entities
                ]
        elif message.photo:
            mailing_data["type"] = "photo"
            mailing_data["content"] = message.photo[-1].file_id
            mailing_data["caption"] = message.caption
            if message.caption_entities:
                mailing_data["caption_entities"] = [
                    {
                        "type": entity.type,
                        "offset": entity.offset,
                        "length": entity.length,
                        "url": entity.url,
                        "user": entity.user,
                        "language": entity.language,
                        "custom_emoji_id": entity.custom_emoji_id,
                    }
                    for entity in message.caption_entities
                ]
        elif message.video:
            mailing_data["type"] = "video"
            mailing_data["content"] = message.video.file_id
            mailing_data["caption"] = message.caption
            if message.caption_entities:
                mailing_data["caption_entities"] = [
                    {
                        "type": entity.type,
                        "offset": entity.offset,
                        "length": entity.length,
                        "url": entity.url,
                        "user": entity.user,
                        "language": entity.language,
                        "custom_emoji_id": entity.custom_emoji_id,
                    }
                    for entity in message.caption_entities
                ]
        elif message.voice:
            mailing_data["type"] = "voice"
            mailing_data["content"] = message.voice.file_id
            mailing_data["caption"] = message.caption
            if message.caption_entities:
                mailing_data["caption_entities"] = [
                    {
                        "type": entity.type,
                        "offset": entity.offset,
                        "length": entity.length,
                        "url": entity.url,
                        "user": entity.user,
                        "language": entity.language,
                        "custom_emoji_id": entity.custom_emoji_id,
                    }
                    for entity in message.caption_entities
                ]
        else:
            await message.answer(
                "‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ –∏–ª–∏ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."
            )
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.update_data(mailing=mailing_data)

        # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—Ä–æ –∫–Ω–æ–ø–∫–∏
        await state.set_state(AdminStates.WAITING_MAILING_BUTTONS)
        await message.answer(
            "–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫–∏ –∫ —Å–æ–æ–±—â–µ–Ω–∏—é?",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        InlineKeyboardButton(text="‚úÖ –î–∞", callback_data="add_buttons"),
                        InlineKeyboardButton(text="‚ùå –ù–µ—Ç", callback_data="no_buttons"),
                    ]
                ]
            ),
        )

    except Exception as e:
        await write_logs("error", f"Error processing mailing content: {str(e)}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è")
        await state.clear()


@router.callback_query(lambda c: c.data == "add_buttons")
async def process_add_buttons(callback_query: types.CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫.
    
    Args:
        callback_query (types.CallbackQuery): –ó–∞–ø—Ä–æ—Å –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        state (FSMContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º.
    """
    await state.set_state(AdminStates.WAITING_BUTTON_TEXT)
    await callback_query.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –∫–Ω–æ–ø–∫–∏:",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_buttons")]
            ]
        ),
    )


@router.callback_query(lambda c: c.data == "no_buttons")
async def process_no_buttons(callback_query: types.CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–∫–∞–∑ –æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–Ω–æ–ø–æ–∫.
    
    Args:
        callback_query (types.CallbackQuery): –ó–∞–ø—Ä–æ—Å –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        state (FSMContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º.
    """
    await send_mailing(callback_query.message, state)


@router.callback_query(lambda c: c.data == "cancel_buttons")
async def process_cancel_buttons(
    callback_query: types.CallbackQuery, state: FSMContext
):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–º–µ–Ω—É –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–Ω–æ–ø–æ–∫.
    
    Args:
        callback_query (types.CallbackQuery): –ó–∞–ø—Ä–æ—Å –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        state (FSMContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º.
    """
    await send_mailing(callback_query.message, state)


@router.message(AdminStates.WAITING_BUTTON_TEXT)
async def handle_button_text(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏.
    
    Args:
        message (types.Message): –°–æ–æ–±—â–µ–Ω–∏–µ, —Å–æ–¥–µ—Ä–∂–∞—â–µ–µ —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏.
        state (FSMContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º.
    """
    await state.update_data(button_text=message.text)
    await state.set_state(AdminStates.WAITING_BUTTON_URL)
    await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –¥–ª—è –∫–Ω–æ–ø–∫–∏:")


@router.message(AdminStates.WAITING_BUTTON_URL)
async def handle_button_url(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç URL –∫–Ω–æ–ø–∫–∏.
    
    Args:
        message (types.Message): –°–æ–æ–±—â–µ–Ω–∏–µ, —Å–æ–¥–µ—Ä–∂–∞—â–µ–µ URL –∫–Ω–æ–ø–∫–∏.
        state (FSMContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º.
    """
    if not message.text.startswith(("http://", "https://")):
        await message.answer(
            "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Å—ã–ª–∫–∞. –°—Å—ã–ª–∫–∞ –¥–æ–ª–∂–Ω–∞ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å http:// –∏–ª–∏ https://"
        )
        return

    state_data = await state.get_data()
    mailing_data = state_data["mailing"]
    button_text = state_data["button_text"]

    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–Ω–æ–ø–∫–µ
    mailing_data["button"] = {"text": button_text, "url": message.text}

    await state.update_data(mailing=mailing_data)
    await send_mailing(message, state)


async def send_mailing(message: types.Message, state: FSMContext):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–∞—Å—Å—ã–ª–∫—É –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.
    
    Args:
        message (types.Message): –°–æ–æ–±—â–µ–Ω–∏–µ, —Å–æ–¥–µ—Ä–∂–∞—â–µ–µ –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.
        state (FSMContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º.
    """
    try:
        state_data = await state.get_data()
        mailing_data = state_data["mailing"]

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        users = await get_all_users()

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É, –µ—Å–ª–∏ –µ—Å—Ç—å –∫–Ω–æ–ø–∫–∞
        keyboard = None
        if "button" in mailing_data:
            keyboard = InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        InlineKeyboardButton(
                            text=mailing_data["button"]["text"],
                            url=mailing_data["button"]["url"],
                        )
                    ]
                ]
            )

        # –°—á–µ—Ç—á–∏–∫–∏ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        successful = 0
        failed = 0

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º entities –≤ –æ–±—ä–µ–∫—Ç—ã MessageEntity
        entities = None
        caption_entities = None

        if "entities" in mailing_data:
            entities = [
                MessageEntity(
                    type=e["type"],
                    offset=e["offset"],
                    length=e["length"],
                    url=e.get("url"),
                    user=e.get("user"),
                    language=e.get("language"),
                    custom_emoji_id=e.get("custom_emoji_id"),
                )
                for e in mailing_data["entities"]
            ]

        if "caption_entities" in mailing_data:
            caption_entities = [
                MessageEntity(
                    type=e["type"],
                    offset=e["offset"],
                    length=e["length"],
                    url=e.get("url"),
                    user=e.get("user"),
                    language=e.get("language"),
                    custom_emoji_id=e.get("custom_emoji_id"),
                )
                for e in mailing_data["caption_entities"]
            ]

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
        for user in users:
            try:
                if mailing_data["type"] == "text":
                    await message.bot.send_message(
                        user.user_id,
                        mailing_data["content"],
                        entities=entities,
                        reply_markup=keyboard,
                    )
                elif mailing_data["type"] == "photo":
                    await message.bot.send_photo(
                        user.user_id,
                        mailing_data["content"],
                        caption=mailing_data.get("caption"),
                        caption_entities=caption_entities,
                        reply_markup=keyboard,
                    )
                elif mailing_data["type"] == "video":
                    await message.bot.send_video(
                        user.user_id,
                        mailing_data["content"],
                        caption=mailing_data.get("caption"),
                        caption_entities=caption_entities,
                        reply_markup=keyboard,
                    )
                elif mailing_data["type"] == "voice":
                    await message.bot.send_voice(
                        user.user_id,
                        mailing_data["content"],
                        caption=mailing_data.get("caption"),
                        caption_entities=caption_entities,
                        reply_markup=keyboard,
                    )
                successful += 1
            except Exception as e:
                await write_logs(
                    "error", f"Error sending mailing to user {user.user_id}: {str(e)}"
                )
                failed += 1

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        await message.answer(
            f"üìä –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n\n"
            f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {successful}\n"
            f"‚ùå –û—à–∏–±–æ–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏: {failed}",
            reply_markup=await get_admin_keyboard(),
        )

    except Exception as e:
        await write_logs("error", f"Error in mailing: {str(e)}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—Å—ã–ª–∫–µ")
    finally:
        await state.clear()