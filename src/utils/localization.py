from src.database.settings_data import create_session, Localization
from sqlalchemy import select
from typing import Dict, Optional
from src.utils.logging import write_logs
import time

# Cache for storing messages
_message_cache: Dict[str, Dict[str, Dict[str, str]]] = {}
_last_cache_update = 0
CACHE_TTL = 60  # 1 minute in seconds


async def _init_messages():
    """Initialize messages from the database into cache."""
    if not _message_cache:
        async with create_session() as session:
            result = await session.execute(select(Localization))
            messages = result.scalars().all()

            for msg in messages:
                if msg.language not in _message_cache:
                    _message_cache[msg.language] = {}
                if msg.category not in _message_cache[msg.language]:
                    _message_cache[msg.language][msg.category] = {}
                _message_cache[msg.language][msg.category][msg.key] = msg.message


async def _refresh_cache():
    """Refresh the message cache from database."""
    global _last_cache_update
    _message_cache.clear()
    await _init_messages()
    _last_cache_update = time.time()


async def _should_refresh_cache() -> bool:
    """Check if cache should be refreshed based on TTL."""
    return time.time() - _last_cache_update > CACHE_TTL


async def get_message(key: str, language: str = "ru", category: str = "system") -> str:
    """Get a localized message by key and language.

    Args:
        key (str): Message key
        language (str, optional): Language code. Defaults to 'ru'.
        category (str, optional): Message category. Defaults to 'system'.

    Returns:
        str: Localized message or key if not found
    """
    if not _message_cache or await _should_refresh_cache():
        await _refresh_cache()

    return _message_cache.get(language, {}).get(category, {}).get(key, key)


async def set_message(
    key: str, language: str, message: str, category: str = "system"
) -> None:
    """Set a localized message.

    Args:
        key (str): Message key
        language (str): Language code
        message (str): Message text
        category (str, optional): Message category. Defaults to 'system'.
    """
    async with create_session() as session:
        # Check if message exists
        stmt = select(Localization).where(
            Localization.key == key,
            Localization.language == language,
            Localization.category == category,
        )
        result = await session.execute(stmt)
        existing = result.scalar_one_or_none()

        if existing:
            existing.message = message
        else:
            new_message = Localization(
                key=key, language=language, message=message, category=category
            )
            session.add(new_message)

        await session.commit()

        # Update cache
        if language not in _message_cache:
            _message_cache[language] = {}
        if category not in _message_cache[language]:
            _message_cache[language][category] = {}
        _message_cache[language][category][key] = message


# Initialize default messages if they don't exist
async def init_default_messages():
    """Initialize default messages in the database."""
    try:
        # System messages
        system_messages = {
            "start": "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            "invalid_password": "–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å!",
            "access_denied": "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞!",
            "admin_msg": "–í—ã –≤–æ—à–ª–∏ –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å:",
            "enter_password": "–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:",
            "wrong_password": "–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å!",
            "error_survey": "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ —Å —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –æ–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.",
            "error_processing": "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
        }

        # Survey messages
        survey_messages = {
            "start_survey": "–ü—Ä–∏–≤–µ—Ç! –î–∞–≤–∞–π—Ç–µ –ø—Ä–æ–π–¥–µ–º –Ω–µ–±–æ–ª—å—à–æ–π –æ–ø—Ä–æ—Å, —á—Ç–æ–±—ã –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–∞—à–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—É–±—Å–∏–¥–∏–∏.",
            "select_answer": "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∞:",
            "start_preparation": "–û—Ç–ª–∏—á–Ω–æ! –°–µ–π—á–∞—Å –º—ã –Ω–∞—á–Ω–µ–º –ø–æ–¥–≥–æ—Ç–æ–≤–∫—É –≤–∞—à–µ–π –∑–∞—è–≤–∫–∏.",
            "get_guide": "–°–µ–π—á–∞—Å –æ—Ç–ø—Ä–∞–≤–ª—é –≤–∞–º –≥–∞–π–¥ –ø–æ –ø–æ–ª—É—á–µ–Ω–∏—é —Å—É–±—Å–∏–¥–∏–∏.",
            "contact_expert": "–°–µ–π—á–∞—Å –ø–æ–¥–∫–ª—é—á–∏–º —ç–∫—Å–ø–µ—Ä—Ç–∞ –¥–ª—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏.",
            "faq": "–í–æ—Ç –æ—Ç–≤–µ—Ç—ã –Ω–∞ —á–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã:",
            "survey_final_base": """–û—Ç–ª–∏—á–Ω–æ!
–ü–æ —ç—Ç–∏–º –¥–∞–Ω–Ω—ã–º —É —Ç–µ–±—è –æ—á–µ–Ω—å –≤—ã—Å–æ–∫–∏–µ —à–∞–Ω—Å—ã –Ω–∞ –≤—ã–¥–∞—á—É. –° –ø–æ–¥–æ–±–Ω—ã–º–∏ –æ—Ç–≤–µ—Ç–∞–º–∏ –º–æ–∏ –∫–ª–∏–µ–Ω—Ç—ã –ø–æ–ª—É—á–∞—é—Ç —Å—É–±—Å–∏–¥–∏—é —Å –ø–µ—Ä–≤–æ–π –ø–æ–ø—ã—Ç–∫–∏ –≤ 90%+ —Å–ª—É—á–∞–µ–≤

üìå –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–∞—à–µ–≥–æ –≤–æ–∑—Ä–∞—Å—Ç–∞ –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã:""",
            "survey_final_under_25": """
‚Äî –°–æ—Ü–∏–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç—Ä–∞–∫—Ç ‚Äî –¥–æ 350.000 ‚ÇΩ
‚Äî –ì—Ä–∞–Ω—Ç –¥–ª—è –ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª–µ–π ‚Äî –¥–æ 500.000 ‚ÇΩ""",
            "survey_final_over_25": """
‚Äî –°–æ—Ü–∏–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç—Ä–∞–∫—Ç ‚Äî –¥–æ 350.000 ‚ÇΩ""",
            "survey_final_steps": """

–ß—Ç–æ –¥–∞–ª—å—à–µ? –í—ã–±–µ—Ä–∏, —Å —á–µ–≥–æ —Ö–æ—á–µ—à—å –Ω–∞—á–∞—Ç—å:

üëá –¢–≤–æ–∏ —Å–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:

1Ô∏è‚É£ –ù–∞—á–∞—Ç—å –ø–æ–¥–≥–æ—Ç–æ–≤–∫—É –∑–∞—è–≤–∫–∏ ‚Äî –≤–∫–ª—é—á–∞–µ–º—Å—è –≤ —Ä–∞–±–æ—Ç—É –∏ –∏–¥–µ–º –∫ —Å—É–±—Å–∏–¥–∏–∏ –≤–º–µ—Å—Ç–µ
2Ô∏è‚É£ –ó–∞–±—Ä–∞—Ç—å –≥–∞–π–¥ ¬´–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å –¥–æ 500.000‚ÇΩ –æ—Ç –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–∞¬ª - –ø–æ–ª–µ–∑–Ω—ã–π PDF —Å –∞–ª–≥–æ—Ä–∏—Ç–º–æ–º, –ø—Ä–∏–º–µ—Ä–∞–º–∏ –∏ –ª–∞–π—Ñ—Ö–∞–∫–∞–º–∏
3Ô∏è‚É£ –°–≤—è–∑–∞—Ç—å—Å—è —Å —ç–∫—Å–ø–µ—Ä—Ç–æ–º ‚Äî –æ–±—Å—É–¥–∏—Ç—å –≤–∞—à—É —Å–∏—Ç—É–∞—Ü–∏—é –∏ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã
4Ô∏è‚É£ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç–≤–µ—Ç—ã –Ω–∞ —á–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã (FAQ) ‚Äî –∫–æ—Ä–æ—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É""",
            "survey_result_header": "üìã –ù–æ–≤—ã–π –ø—Ä–æ–π–¥–µ–Ω–Ω—ã–π –æ–ø—Ä–æ—Å",
            "survey_result_user_info": "üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{username}\nüë§ –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä: {user_id}",
            "survey_result_answers_header": "üìù –û—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã:",
        }

        # Questions
        question_messages = {
            "question_has_business": "–ï—Å—Ç—å –ª–∏ —É —Ç–µ–±—è –ò–ü/–°–∞–º–æ–∑–∞–Ω—è—Ç–æ—Å—Ç—å?",
            "question_is_under_25": "–¢—ã –º–ª–∞–¥—à–µ 25 –ª–µ—Ç?",
            "question_has_experience": "–ï—Å—Ç—å –ª–∏ —É —Ç–µ–±—è –æ–ø—ã—Ç –∏–ª–∏ –Ω–∞–≤—ã–∫–∏ –≤ —Å—Ñ–µ—Ä–µ –±—É–¥—É—â–µ–≥–æ –±–∏–∑–Ω–µ—Å–∞?",
            "question_region": "–í –∫–∞–∫–æ–º —Ç—ã —Ä–µ–≥–∏–æ–Ω–µ?",
            "question_official_income": "–ö–∞–∫–æ–π —É —Ç–µ–±—è —Å–µ–π—á–∞—Å –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –¥–æ—Ö–æ–¥? (–ø–µ—Ä–µ–≤–æ–¥—ã –Ω–∞ –∫–∞—Ä—Ç—É –Ω–µ —Å—á–∏—Ç–∞—é—Ç—Å—è)",
            "question_work_plan": "–ü–ª–∞–Ω–∏—Ä—É–µ—à—å –ª–∏ —Ç—ã —Ä–∞–±–æ—Ç–∞—Ç—å –æ–¥–∏–Ω –∏–ª–∏ –Ω–∞–Ω–∏–º–∞—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤?",
            "question_micro_result": "–ú–æ–∂–Ω–æ –∫–∞–∫–æ–π-—Ç–æ –º–∏–∫—Ä–æ—Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–∞—Ç—å, —á—Ç–æ–±—ã –ø—Ä–æ—â–µ –±—ã–ª–æ –¥–æ–π—Ç–∏ –¥–æ –∫–æ–Ω—Ü–∞ –≤–æ–ø—Ä–æ—Å–æ–≤",
            "question_subsidy_interest": "–ù–∞—Å–∫–æ–ª—å–∫–æ —Å–µ—Ä—å—ë–∑–Ω–æ –≤—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –ø–æ–ª—É—á–∏—Ç—å —Å—É–±—Å–∏–¥–∏—é –≤ –±–ª–∏–∂–∞–π—à–∏–µ 2 –º–µ—Å—è—Ü–∞?",
            "question_desired_outcome": "–ß—Ç–æ –≤—ã —Ö–æ—Ç–µ–ª–∏ –±—ã –ø–æ–ª—É—á–∏—Ç—å?",
            "question_importance_level": "–ù–∞—Å–∫–æ–ª—å–∫–æ –≤–∞–∂–Ω–æ –¥–ª—è –≤–∞—Å —É–≤–µ–ª–∏—á–∏—Ç—å —à–∞–Ω—Å—ã –Ω–∞ –æ–¥–æ–±—Ä–µ–Ω–∏–µ –∏ —Å–æ–∫—Ä–∞—Ç–∏—Ç—å —Å—Ä–æ–∫–∏?",
            "question_investment_readiness": "–í—ã –≥–æ—Ç–æ–≤—ã –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ –ø–æ–¥–≥–æ—Ç–æ–≤–∫—É, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å—É–±—Å–∏–¥–∏—é –≤ 350‚Äì500 —Ç—ã—Å. —Ä—É–±?",
        }

        # Initialize all messages
        for key, message in system_messages.items():
            await set_message(key, "ru", message, "system")
            await write_logs("info", f"Initialized system message: {key}")

        for key, message in survey_messages.items():
            await set_message(key, "ru", message, "survey")
            await write_logs("info", f"Initialized survey message: {key}")

        for key, message in question_messages.items():
            await set_message(key, "ru", message, "questions")
            await write_logs("info", f"Initialized question message: {key}")

        await write_logs("info", "All messages initialized successfully")

    except Exception as e:
        await write_logs("error", f"Error initializing messages: {str(e)}")
        raise
