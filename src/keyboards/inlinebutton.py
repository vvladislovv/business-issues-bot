from aiogram.utils.keyboard import (
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    ReplyKeyboardMarkup,
)
from src.utils.logging import write_logs
from aiogram.types import InlineKeyboardButton as TypesInlineKeyboardButton
from aiogram.types import Message


async def get_general_menu() -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –æ–±—â–µ–≥–æ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –æ–ø—Ä–æ—Å–∞ –∏ –¥–æ—Å—Ç—É–ø–∞ –∫ FAQ.

    Returns:
        InlineKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏.
    """
    keyboard = [
        [
            TypesInlineKeyboardButton(text="üìù –ü—Ä–æ–π—Ç–∏ –æ–ø—Ä–æ—Å", callback_data="Survey"),
            TypesInlineKeyboardButton(
                text="‚ùì FAQ", url="https://telegra.ph/test-bot-05-23-2"
            ),
        ],
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

async def get_mailing_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏."""
    keyboard = InlineKeyboardMarkup(row_width=1)
    keyboard.add(
        InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É", callback_data="confirm_mailing"),
        InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É", callback_data="cancel_mailing"),
    )
    return keyboard

async def get_admin_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.

    Returns:
        InlineKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.
    """
    keyboard = [
        [
            TypesInlineKeyboardButton(
                text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏", callback_data="admin_activity_stats"
            )
        ],
        [
            TypesInlineKeyboardButton(
                text="üë• –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="admin_user_stats"
            )
        ],
        [TypesInlineKeyboardButton(text="üì® –†–∞—Å—Å—ã–ª–∫–∞", callback_data="admin_mailing")],
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


async def get_keyboard(options: list[str] | None = None) -> InlineKeyboardMarkup | None:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–æ–≤.

    Args:
        options (list[str] | None): –°–ø–∏—Å–æ–∫ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–æ–≤. –ï—Å–ª–∏ None, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç None.

    Returns:
        InlineKeyboardMarkup | None: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –∏–ª–∏ None, –µ—Å–ª–∏ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –Ω–µ—Ç.
    """
    if not options:
        return None  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º None –¥–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤ –±–µ–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∞

    buttons = [
        [InlineKeyboardButton(text=option, callback_data=option)] for option in options
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)


async def get_final_keyboard() -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–ø—Ä–æ—Å–∞.

    Returns:
        InlineKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å —Ñ–∏–Ω–∞–ª—å–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏.
    """
    buttons = [
        [
            InlineKeyboardButton(
                text="1Ô∏è‚É£ –ù–∞—á–∞—Ç—å –ø–æ–¥–≥–æ—Ç–æ–≤–∫—É –∑–∞—è–≤–∫–∏", callback_data="start_preparation"
            )
        ],
        [InlineKeyboardButton(text="2Ô∏è‚É£ –ó–∞–±—Ä–∞—Ç—å –≥–∞–π–¥", callback_data="get_guide")],
        [
            InlineKeyboardButton(
                text="3Ô∏è‚É£ –°–≤—è–∑–∞—Ç—å—Å—è —Å —ç–∫—Å–ø–µ—Ä—Ç–æ–º", callback_data="contact_expert"
            )
        ],
        [InlineKeyboardButton(text="4Ô∏è‚É£ FAQ", url="https://telegra.ph/test-bot-05-23-2")],
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)


async def new_message(
    message: Message,
    text: str,
    keyboard: ReplyKeyboardMarkup | InlineKeyboardMarkup | None = None,
) -> Message:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π.

    Args:
        message (Message): –°–æ–æ–±—â–µ–Ω–∏–µ, –∫ –∫–æ—Ç–æ—Ä–æ–º—É –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
        text (str): –¢–µ–∫—Å—Ç –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.
        keyboard (ReplyKeyboardMarkup | InlineKeyboardMarkup | None): –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.

    Returns:
        Message: –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
    """
    try:
        markup = None
        if keyboard:
            if isinstance(keyboard, (InlineKeyboardMarkup, ReplyKeyboardMarkup)):
                markup = keyboard
            elif isinstance(keyboard, list):
                markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
            else:
                markup = keyboard.as_markup()

        return await message.answer(
            text=text, reply_markup=markup, parse_mode="Markdown"
        )

    except Exception as e:
        await write_logs("error", f"Error in new_message: {e}")


async def update_message(
    message: Message,
    text: str,
    keyboard: ReplyKeyboardMarkup | InlineKeyboardMarkup | None = None,
) -> None:
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —É–¥–∞–ª—è—è –ø—Ä–µ–¥—ã–¥—É—â—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏ –¥–æ–±–∞–≤–ª—è—è –Ω–æ–≤—É—é.

    Args:
        message (Message): –°–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–æ.
        text (str): –ù–æ–≤—ã–π —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è.
        keyboard (ReplyKeyboardMarkup | InlineKeyboardMarkup | None): –ù–æ–≤–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è.
    """
    try:
        # –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —É –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        try:
            await message.edit_reply_markup(reply_markup=None)
        except Exception:
            pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        await message.answer(text=text, reply_markup=keyboard, parse_mode="Markdown")
    except Exception as error:
        await write_logs("error", f"Error in update_message: {error}")
